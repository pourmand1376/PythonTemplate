version: '3'

services:
  api:
    image: main_image_address
    volumes:
      - ./logs:/app/logs
      - ./res:/app/res
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - 8181:80
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      #- traefik.http.services.app.loadbalancer.server.port=80
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.app-main-http.entrypoints=http
      - traefik.http.routers.app-main-http.rule=Host(`${TRAEFIK_DOMAIN}`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.app-main-https.entrypoints=https
      - traefik.http.routers.app-main-https.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.app-main-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      - traefik.http.routers.app-main-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      - traefik.http.routers.app-main-http.middlewares=https-redirect
      #- traefik.http.routers.app-main-https.middlewares=admin-auth
      # enable CORS (to allow localhost to connect)
      - traefik.http.routers.app-main-https.middlewares=cors
      - traefik.http.routers.app-main-http.middlewares=cors
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

networks:
  traefik-public:
    external: true